"""autogenerated by genpy from ptu_control/commandSweepRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class commandSweepRequest(genpy.Message):
  _md5sum = "d9bae297918c9ad58f81026a706beeea"
  _type = "ptu_control/commandSweepRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 min_pan
float64 max_pan
float64 min_tilt
float64 max_tilt
int16 n_pan
int16 n_tilt
float64 samp_delay

"""
  __slots__ = ['min_pan','max_pan','min_tilt','max_tilt','n_pan','n_tilt','samp_delay']
  _slot_types = ['float64','float64','float64','float64','int16','int16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       min_pan,max_pan,min_tilt,max_tilt,n_pan,n_tilt,samp_delay

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(commandSweepRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min_pan is None:
        self.min_pan = 0.
      if self.max_pan is None:
        self.max_pan = 0.
      if self.min_tilt is None:
        self.min_tilt = 0.
      if self.max_tilt is None:
        self.max_tilt = 0.
      if self.n_pan is None:
        self.n_pan = 0
      if self.n_tilt is None:
        self.n_tilt = 0
      if self.samp_delay is None:
        self.samp_delay = 0.
    else:
      self.min_pan = 0.
      self.max_pan = 0.
      self.min_tilt = 0.
      self.max_tilt = 0.
      self.n_pan = 0
      self.n_tilt = 0
      self.samp_delay = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d2hd.pack(_x.min_pan, _x.max_pan, _x.min_tilt, _x.max_tilt, _x.n_pan, _x.n_tilt, _x.samp_delay))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.min_pan, _x.max_pan, _x.min_tilt, _x.max_tilt, _x.n_pan, _x.n_tilt, _x.samp_delay,) = _struct_4d2hd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d2hd.pack(_x.min_pan, _x.max_pan, _x.min_tilt, _x.max_tilt, _x.n_pan, _x.n_tilt, _x.samp_delay))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.min_pan, _x.max_pan, _x.min_tilt, _x.max_tilt, _x.n_pan, _x.n_tilt, _x.samp_delay,) = _struct_4d2hd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d2hd = struct.Struct("<4d2hd")
"""autogenerated by genpy from ptu_control/commandSweepResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class commandSweepResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "ptu_control/commandSweepResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(commandSweepResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class commandSweep(object):
  _type          = 'ptu_control/commandSweep'
  _md5sum = 'd9bae297918c9ad58f81026a706beeea'
  _request_class  = commandSweepRequest
  _response_class = commandSweepResponse
