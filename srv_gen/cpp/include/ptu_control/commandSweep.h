/* Auto-generated by genmsg_cpp for file /home/administrator/ros/ptu_control/srv/commandSweep.srv */
#ifndef PTU_CONTROL_SERVICE_COMMANDSWEEP_H
#define PTU_CONTROL_SERVICE_COMMANDSWEEP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ptu_control
{
template <class ContainerAllocator>
struct commandSweepRequest_ {
  typedef commandSweepRequest_<ContainerAllocator> Type;

  commandSweepRequest_()
  : min_pan(0.0)
  , max_pan(0.0)
  , min_tilt(0.0)
  , max_tilt(0.0)
  , n_pan(0)
  , n_tilt(0)
  , samp_delay(0.0)
  {
  }

  commandSweepRequest_(const ContainerAllocator& _alloc)
  : min_pan(0.0)
  , max_pan(0.0)
  , min_tilt(0.0)
  , max_tilt(0.0)
  , n_pan(0)
  , n_tilt(0)
  , samp_delay(0.0)
  {
  }

  typedef double _min_pan_type;
  double min_pan;

  typedef double _max_pan_type;
  double max_pan;

  typedef double _min_tilt_type;
  double min_tilt;

  typedef double _max_tilt_type;
  double max_tilt;

  typedef int16_t _n_pan_type;
  int16_t n_pan;

  typedef int16_t _n_tilt_type;
  int16_t n_tilt;

  typedef double _samp_delay_type;
  double samp_delay;


  typedef boost::shared_ptr< ::ptu_control::commandSweepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptu_control::commandSweepRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct commandSweepRequest
typedef  ::ptu_control::commandSweepRequest_<std::allocator<void> > commandSweepRequest;

typedef boost::shared_ptr< ::ptu_control::commandSweepRequest> commandSweepRequestPtr;
typedef boost::shared_ptr< ::ptu_control::commandSweepRequest const> commandSweepRequestConstPtr;


template <class ContainerAllocator>
struct commandSweepResponse_ {
  typedef commandSweepResponse_<ContainerAllocator> Type;

  commandSweepResponse_()
  {
  }

  commandSweepResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ptu_control::commandSweepResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptu_control::commandSweepResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct commandSweepResponse
typedef  ::ptu_control::commandSweepResponse_<std::allocator<void> > commandSweepResponse;

typedef boost::shared_ptr< ::ptu_control::commandSweepResponse> commandSweepResponsePtr;
typedef boost::shared_ptr< ::ptu_control::commandSweepResponse const> commandSweepResponseConstPtr;

struct commandSweep
{

typedef commandSweepRequest Request;
typedef commandSweepResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct commandSweep
} // namespace ptu_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptu_control::commandSweepRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptu_control::commandSweepRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptu_control::commandSweepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d9bae297918c9ad58f81026a706beeea";
  }

  static const char* value(const  ::ptu_control::commandSweepRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd9bae297918c9ad5ULL;
  static const uint64_t static_value2 = 0x8f81026a706beeeaULL;
};

template<class ContainerAllocator>
struct DataType< ::ptu_control::commandSweepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptu_control/commandSweepRequest";
  }

  static const char* value(const  ::ptu_control::commandSweepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptu_control::commandSweepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 min_pan\n\
float64 max_pan\n\
float64 min_tilt\n\
float64 max_tilt\n\
int16 n_pan\n\
int16 n_tilt\n\
float64 samp_delay\n\
\n\
";
  }

  static const char* value(const  ::ptu_control::commandSweepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptu_control::commandSweepRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptu_control::commandSweepResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptu_control::commandSweepResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptu_control::commandSweepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ptu_control::commandSweepResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ptu_control::commandSweepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptu_control/commandSweepResponse";
  }

  static const char* value(const  ::ptu_control::commandSweepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptu_control::commandSweepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::ptu_control::commandSweepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptu_control::commandSweepResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptu_control::commandSweepRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.min_pan);
    stream.next(m.max_pan);
    stream.next(m.min_tilt);
    stream.next(m.max_tilt);
    stream.next(m.n_pan);
    stream.next(m.n_tilt);
    stream.next(m.samp_delay);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct commandSweepRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptu_control::commandSweepResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct commandSweepResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptu_control::commandSweep> {
  static const char* value() 
  {
    return "d9bae297918c9ad58f81026a706beeea";
  }

  static const char* value(const ptu_control::commandSweep&) { return value(); } 
};

template<>
struct DataType<ptu_control::commandSweep> {
  static const char* value() 
  {
    return "ptu_control/commandSweep";
  }

  static const char* value(const ptu_control::commandSweep&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptu_control::commandSweepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d9bae297918c9ad58f81026a706beeea";
  }

  static const char* value(const ptu_control::commandSweepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptu_control::commandSweepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptu_control/commandSweep";
  }

  static const char* value(const ptu_control::commandSweepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptu_control::commandSweepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d9bae297918c9ad58f81026a706beeea";
  }

  static const char* value(const ptu_control::commandSweepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptu_control::commandSweepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptu_control/commandSweep";
  }

  static const char* value(const ptu_control::commandSweepResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTU_CONTROL_SERVICE_COMMANDSWEEP_H

